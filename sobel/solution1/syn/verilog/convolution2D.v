// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        posy,
        posx,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        operator_address0,
        operator_ce0,
        operator_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 8'b1;
parameter    ap_ST_fsm_state2 = 8'b10;
parameter    ap_ST_fsm_state3 = 8'b100;
parameter    ap_ST_fsm_state4 = 8'b1000;
parameter    ap_ST_fsm_state5 = 8'b10000;
parameter    ap_ST_fsm_state6 = 8'b100000;
parameter    ap_ST_fsm_state7 = 8'b1000000;
parameter    ap_ST_fsm_state8 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv3_2 = 3'b10;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_0 = 2'b00;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] posy;
input  [9:0] posx;
output  [19:0] input_r_address0;
output   input_r_ce0;
input  [7:0] input_r_q0;
output  [3:0] operator_address0;
output   operator_ce0;
input  [31:0] operator_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg operator_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [2:0] j_4_fu_107_p2;
reg   [2:0] j_4_reg_230;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_101_p2;
wire   [4:0] j_4_cast_fu_113_p1;
reg   [4:0] j_4_cast_reg_235;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_117_p2;
wire   [2:0] i_6_fu_158_p2;
reg   [2:0] i_6_reg_248;
wire   [4:0] tmp_12_fu_182_p2;
reg   [4:0] tmp_12_reg_253;
reg   [7:0] input_load_reg_258;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state5;
wire   [31:0] grp_fu_194_p2;
reg   [31:0] tmp_9_reg_278;
wire   [0:0] ap_CS_fsm_state7;
reg   [2:0] j_reg_70;
reg   [2:0] i_reg_82;
wire   [0:0] ap_CS_fsm_state8;
wire   [31:0] sum_cast_fu_153_p1;
wire   [31:0] tmp_15_cast_fu_187_p1;
reg   [31:0] res_fu_30;
wire   [31:0] res_1_fu_200_p2;
wire  signed [9:0] tmp_5_cast_fu_123_p1;
wire   [9:0] tmp5_fu_127_p2;
wire   [19:0] tmp1_fu_132_p3;
wire  signed [21:0] j_cast1_fu_143_p1;
wire   [21:0] tmp1_cast_fu_139_p1;
wire   [21:0] sum_fu_147_p2;
wire   [4:0] tmp_fu_168_p3;
wire   [4:0] i_6_cast_cast_fu_164_p1;
wire   [4:0] tmp_11_fu_176_p2;
wire   [7:0] grp_fu_194_p0;
reg   [7:0] ap_NS_fsm;
wire   [31:0] grp_fu_194_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'b1;
end

sobel_mul_8ns_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sobel_mul_8ns_32sbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_194_p0),
    .din1(operator_q0),
    .ce(1'b1),
    .dout(grp_fu_194_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_101_p2 == 1'b0))) begin
        i_reg_82 <= ap_const_lv3_7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_82 <= i_6_reg_248;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond_fu_117_p2))) begin
        j_reg_70 <= j_4_reg_230;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        j_reg_70 <= ap_const_lv3_7;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        res_fu_30 <= res_1_fu_200_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        res_fu_30 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond_fu_117_p2))) begin
        i_6_reg_248 <= i_6_fu_158_p2;
        tmp_12_reg_253 <= tmp_12_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_load_reg_258 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_101_p2 == 1'b0))) begin
        j_4_cast_reg_235[2 : 0] <= j_4_cast_fu_113_p1[2 : 0];
        j_4_reg_230 <= j_4_fu_107_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_9_reg_278 <= grp_fu_194_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & ~(exitcond1_fu_101_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond1_fu_101_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        operator_ce0 = 1'b1;
    end else begin
        operator_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond1_fu_101_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond_fu_117_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_return = res_fu_30;

assign exitcond1_fu_101_p2 = ((j_reg_70 == ap_const_lv3_2) ? 1'b1 : 1'b0);

assign exitcond_fu_117_p2 = ((i_reg_82 == ap_const_lv3_2) ? 1'b1 : 1'b0);

assign grp_fu_194_p0 = grp_fu_194_p00;

assign grp_fu_194_p00 = input_load_reg_258;

assign i_6_cast_cast_fu_164_p1 = i_6_fu_158_p2;

assign i_6_fu_158_p2 = (i_reg_82 + ap_const_lv3_1);

assign input_r_address0 = sum_cast_fu_153_p1;

assign j_4_cast_fu_113_p1 = j_4_fu_107_p2;

assign j_4_fu_107_p2 = (j_reg_70 + ap_const_lv3_1);

assign j_cast1_fu_143_p1 = $signed(j_reg_70);

assign operator_address0 = tmp_15_cast_fu_187_p1;

assign res_1_fu_200_p2 = (res_fu_30 + tmp_9_reg_278);

assign sum_cast_fu_153_p1 = sum_fu_147_p2;

assign sum_fu_147_p2 = ($signed(j_cast1_fu_143_p1) + $signed(tmp1_cast_fu_139_p1));

assign tmp1_cast_fu_139_p1 = tmp1_fu_132_p3;

assign tmp1_fu_132_p3 = {{tmp5_fu_127_p2}, {posx}};

assign tmp5_fu_127_p2 = ($signed(posy) + $signed(tmp_5_cast_fu_123_p1));

assign tmp_11_fu_176_p2 = (tmp_fu_168_p3 - i_6_cast_cast_fu_164_p1);

assign tmp_12_fu_182_p2 = (tmp_11_fu_176_p2 + j_4_cast_reg_235);

assign tmp_15_cast_fu_187_p1 = tmp_12_reg_253;

assign tmp_5_cast_fu_123_p1 = $signed(i_reg_82);

assign tmp_fu_168_p3 = {{i_6_fu_158_p2}, {ap_const_lv2_0}};

always @ (posedge ap_clk) begin
    j_4_cast_reg_235[4:3] <= 2'b00;
end

endmodule //convolution2D
