-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution2D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    posy : IN STD_LOGIC_VECTOR (9 downto 0);
    posx : IN STD_LOGIC_VECTOR (9 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    operator_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    operator_ce0 : OUT STD_LOGIC;
    operator_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution2D is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_4_fu_107_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_reg_230 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_cast_fu_113_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_4_cast_reg_235 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_158_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_248 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_182_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_reg_253 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_load_reg_258 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_reg_70 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_82 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sum_cast_fu_153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_cast_fu_187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_fu_30 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_1_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_fu_123_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_fu_127_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_132_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_cast1_fu_143_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp1_cast_fu_139_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sum_fu_147_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_fu_168_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_cast_cast_fu_164_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_176_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_194_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component sobel_mul_8ns_32sbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sobel_mul_8ns_32sbkb_U0 : component sobel_mul_8ns_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_194_p0,
        din1 => operator_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_194_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_101_p2 = ap_const_lv1_0))) then 
                i_reg_82 <= ap_const_lv3_7;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                i_reg_82 <= i_6_reg_248;
            end if; 
        end if;
    end process;

    j_reg_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond_fu_117_p2)))) then 
                j_reg_70 <= j_4_reg_230;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_70 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    res_fu_30_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
                res_fu_30 <= res_1_fu_200_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                res_fu_30 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_117_p2))) then
                i_6_reg_248 <= i_6_fu_158_p2;
                tmp_12_reg_253 <= tmp_12_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                input_load_reg_258 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond1_fu_101_p2 = ap_const_lv1_0))) then
                    j_4_cast_reg_235(2 downto 0) <= j_4_cast_fu_113_p1(2 downto 0);
                j_4_reg_230 <= j_4_fu_107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                tmp_9_reg_278 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    j_4_cast_reg_235(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_101_p2, exitcond_fu_117_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond1_fu_101_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_117_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_101_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond1_fu_101_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_101_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond1_fu_101_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= res_fu_30;
    exitcond1_fu_101_p2 <= "1" when (j_reg_70 = ap_const_lv3_2) else "0";
    exitcond_fu_117_p2 <= "1" when (i_reg_82 = ap_const_lv3_2) else "0";
    grp_fu_194_p0 <= grp_fu_194_p00(8 - 1 downto 0);
    grp_fu_194_p00 <= std_logic_vector(resize(unsigned(input_load_reg_258),32));
    i_6_cast_cast_fu_164_p1 <= std_logic_vector(resize(unsigned(i_6_fu_158_p2),5));
    i_6_fu_158_p2 <= std_logic_vector(unsigned(i_reg_82) + unsigned(ap_const_lv3_1));
    input_r_address0 <= sum_cast_fu_153_p1(20 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_4_cast_fu_113_p1 <= std_logic_vector(resize(unsigned(j_4_fu_107_p2),5));
    j_4_fu_107_p2 <= std_logic_vector(unsigned(j_reg_70) + unsigned(ap_const_lv3_1));
        j_cast1_fu_143_p1 <= std_logic_vector(resize(signed(j_reg_70),22));

    operator_address0 <= tmp_15_cast_fu_187_p1(4 - 1 downto 0);

    operator_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            operator_ce0 <= ap_const_logic_1;
        else 
            operator_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_1_fu_200_p2 <= std_logic_vector(unsigned(res_fu_30) + unsigned(tmp_9_reg_278));
    sum_cast_fu_153_p1 <= std_logic_vector(resize(unsigned(sum_fu_147_p2),32));
    sum_fu_147_p2 <= std_logic_vector(signed(j_cast1_fu_143_p1) + signed(tmp1_cast_fu_139_p1));
    tmp1_cast_fu_139_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_132_p3),22));
    tmp1_fu_132_p3 <= (tmp5_fu_127_p2 & posx);
    tmp5_fu_127_p2 <= std_logic_vector(unsigned(posy) + unsigned(tmp_5_cast_fu_123_p1));
    tmp_11_fu_176_p2 <= std_logic_vector(unsigned(tmp_fu_168_p3) - unsigned(i_6_cast_cast_fu_164_p1));
    tmp_12_fu_182_p2 <= std_logic_vector(unsigned(tmp_11_fu_176_p2) + unsigned(j_4_cast_reg_235));
    tmp_15_cast_fu_187_p1 <= std_logic_vector(resize(unsigned(tmp_12_reg_253),32));
        tmp_5_cast_fu_123_p1 <= std_logic_vector(resize(signed(i_reg_82),10));

    tmp_fu_168_p3 <= (i_6_fu_158_p2 & ap_const_lv2_0);
end behav;
